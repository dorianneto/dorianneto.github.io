<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>refatoracao on Dorian Neto</title>
    <link>https://dorianneto.github.io/pt/tags/refatoracao/</link>
    <description>Recent content in refatoracao on Dorian Neto</description>
    <image>
      <url>https://dorianneto.github.io/images/dorianneto-thumbnail.jpg</url>
      <link>https://dorianneto.github.io/images/dorianneto-thumbnail.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2013-2022 Dorian Neto</copyright>
    <lastBuildDate>Tue, 30 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://dorianneto.github.io/pt/tags/refatoracao/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Refatorando código com Extract Method</title>
      <link>https://dorianneto.github.io/pt/posts/refatorando-codigo-com-extract-method/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dorianneto.github.io/pt/posts/refatorando-codigo-com-extract-method/</guid>
      <description>Com certeza você já deve ter visto, ou até mesmo criou, funções ou métodos que possuem diversas responsabilidades. Não é novidade para nenhum de nós que isso não é uma boa prática e que pode causar diversos problemas na estrutura do código.
Existe uma analogia com a Fórmula 1 que aborda esse tipo de problema. Quando um carro faz uma parada (Pit stop), diversas pessoas exercem uma tarefa para que o resultado final do objetivo seja atingido (trocar peças e reabastecer o carro), onde cada uma dessas pessoas possui uma única responsabilidade.</description>
    </item>
    
    <item>
      <title>Torne-se um ninja das funções com Early Return</title>
      <link>https://dorianneto.github.io/pt/posts/torne-se-um-ninja-das-funcoes-com-early-return/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dorianneto.github.io/pt/posts/torne-se-um-ninja-das-funcoes-com-early-return/</guid>
      <description>Escrever código elegante e legível é um dos nossos objetivos diariamente, porém, infelizmente isso não ocorre na maioria das vezes. Pressão para entrega de features, cansaço etc, são alguns dos vários fatores que podem contribuir para que esse objetivo não seja alcançado.
Ao longo dos anos, diversos conceitos de boas práticas foram documentados e quando aplicados em nosso dia a dia facilitam conquistar esse objetivo.
Hoje quero abordar um conceito que irá te transformar em um ninja das funções, fazendo com que seu código fique mais rápido (like a ninja!</description>
    </item>
    
  </channel>
</rss>
